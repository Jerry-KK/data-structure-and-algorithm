package leetcode;

import java.util.Arrays;
import java.util.PriorityQueue;

/**
 * @author lethe
 * @date 2022/9/14 0:13
 */
public class Leetcode1619 {
    public static void main(String[] args) {
        //int[] arr = {1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3};
        int[] arr = {65478,50937,36088,32151,39291,10354,75145,59191,509,57409,31202,56584,85879,97314,29809,30679,46075,23816,8259,19792,7180,65839,96774,48020,22878,3510,62642,67941,66612,76577,24488,45647,21969,81976,44790,82864,12907,76592,69248,15745,40877,7612,33140,4114,90313,10538,46964,8178,18612,24237,54434,67768,62219,30333,13555,64786,61014,91679,79778,10212,84097,36441,7793,36370,69365,1404,54640,91448,14979,74075,44855,88271,42806,62307,33910,34660,22282,83940,52555,83924,95473,19137,93981,57491,20491,22832,6975,1442,19311,64882,62043,31496,30220,57863,32370,14159,8624,33990,93659,57961,92014,97506,89606,70334,42517,67769,75233,66616,42692,64768,18124,42426,97614,22238,87311,49027,67956,43276,79265,5651,38055,12999,6165,74918,79518,70476,79554,13054,70890,61792,57078,90156,24473,37463,27431,18191,82635,96844,70055,94109,80296,96014,56467,14293,78141,60080,202,61748,54673,57549,14859,65128,76422,81567,15943,69097,18998,37540,74718,75314,69109,31423,67930,22237,43315,46654,33360,15977,14693,43875,93802,46742,41724,96869,51927,87738,50809,88400,80077,9886,29957,89871,91727,89766,4798,93732,19134,48432,57826,85066,13033,97425,78138,76576,1173,62635,44814,62033,7390,54508,87420,89095,7291,30890,29175,28591,12778,84076,55203,68378,46741,18880,79048,27153,83923,86476,34963,30275,83740,36851,63427,11771,83210,55703,27917,13161,89048,828,77608,19388,65101,25641,61032,12655,66439,14654,83718,73329,44441,92241,6488,9641,51960,4881,17370,92736,37676,53026,16563,6958,62109,86538,56305,29790,27560,26608,89392,83164,71237,79291,79868,49184,90449,69981,30205,55287,50828,47745,11134,75135,54667,93986,83571,157,66721,94201,55234,14083,59877,19363,20952,33872,79537,30838,24639,71060,76269,4267,51532,96029,31589,89459,23190,81698,98641,94091,80661,68013,65278,40772,92948,99251,26979,96991,88200,61494,42542,50426,47423,57332,9902,22642,4810,5670,96634,9896,41693,76828,21184,17057,33890,90914,57415,96274,85175,92826,90245,87324,57607,75347,71412,70755,69087,91408,87740,49537,20339,1438,52973,13889,19506,56968,6376,65224,16486,5363,79968,1272,63995,86119,87779,88829,32121,50305,24133,77600,21466,31382,11932,50746,62185,52943,52027,617,74604,13057,77515,44008,18180,10459,53090,16905,42992,89312,99631,39786,75160,5091,49890,24650,27619,18590,30145,39915,8918,89664,89096,60084,75513,89272,37656,9430,88635,49950,66683,2640,59191,34359,42370,48922,83919,24387,12955,93251,31083,78375,18108,63851,42780,63664,89614,42448,32721,6740,55276,33047,97539,8568,95978,72518,22187,74605,88920,31300,95773,73820,57910,55006,59941,59394,52379,93550,95276,930,21652,51020,20259,57546,21913,6085,68409,7859,39490,97158,39300,65447,81400,28418,32040,31382,94605,1383,63680,55709,10709,17784,6379,36094,5747,72321,73415,48415,82923,43908,44770,88255,40184,51920,65355,44751,76917,61865,66208,48243,53563,40467,48012,64899,46105,83953,82788,75002,77285,91974,44763,58407,91783,34613,91952,51600,43470,87168,76787,22265,65991,78051,99210,37079,78967,48895,41416,24346,54880,3539,4910,85086,7296,85549,75665,45495,82628,55857,98664,683,87459,40006,94829,40110,77766,68356,82800,34867,27671,31186,50931,27417,39858,12820,79258,27567,26811,55784,2337,26067,30768,74603,34918,99226,61982,86452,82464,73516,55462,89618,83750,12074,26438,97872,32051,27986,64540,90770,33028,97009,60842,91020,91242,98069,19195,92288,9053,9495,99638,11664,98873,99248,92504,23470,41285,98414,606,29433,91307,83982,87766,53046,64272,13345,44162,95519,81398,5049,97410,90762,5665,42127,78647,72412,6525,69874,26145,28195,64612,13108,37737,91916,99077,11173,70460,750,30305,53683,35192,96915,7816,87340,83378,75603,8107,4774,71194,70032,43687,43996,77457,53991,11595,15783,75334,71240,63217,45845,36481,66574,24239,71061,71350,63932,83487,31796,55355,75445,5235,46104,19752,95407,50937,23863,79640,51209,36476,469,84567,25979,90677,76584,18293,99295,88869,41899,62887,46994,17517,31191,34477,73941,54216,52268,16301,34212,86319,10995,28457,58956,25908,89327,21012,15493,5676,22839,54433,15751,57500,24939,89407,13304,1610,66579,1596,99202,26637,92873,26601,43328,97864,71358,77387,75710,51862,64018,3823,27025,77079,65005,81155,38505,65795,82773,69125,34473,17342,85448,14533,67956,41270,23736,69062,32719,8832,30922,12000,69777,91268,64085,72845,91999,50031,98802,49550,8917,80603,88185,78405,82895,83745,72895,54342,48074,21464,88496,55020,91909,85509,94273,70557,36454,41487,68341,26641,11089,10694,15223,64034,7760,45879,50578,7690,94033,38347,10080,13365,70144,23457,35887,47890,50740,13668,24357,52700,59979,43011,56799,20453,77685,61706,59427,93833,15938,31657,34663,86355,87667,50095,20883,47742,23072,1270,2456,88219,40129,74857,65810,89643,48251,51397,81725,62088,51597,13205,21952,72425,29843,29312,98387,24522,85566,81764,41140,92096,24111,21546,47832,58413,10963,53733,59376,77763,10880,35772,52623,71676,91617,28757,54746,10242,28684,47683,64516,97098,24080,47357,3383,77277,20057,81684,18448,2903,87851,36234,7026,15490,24493,98021,52757,50713,28597,65579,36954,64122,91640,11423,97752,31606,41107,50632,74875,70067,26004,42945,27834,99666,77229,99664,61147,38401,28321,289,61580,46672,17985};
        System.out.println(trimMean(arr));
        System.out.println(trimMean2(arr));
    }

    public static double trimMean(int[] arr) {
        //Arrays.sort(arr);
        int n = arr.length;
        int l = n/20;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b-a);
        int sum = 0,i = 0;
        for (; i < l; ++i) {
            sum+=arr[i];
            minHeap.offer(arr[i]);
            maxHeap.offer(arr[i]);
        }
        for (; i < n; ++i) {
            sum+=arr[i];
            if(arr[i] > minHeap.peek()) {
                minHeap.poll();
                minHeap.offer(arr[i]);
            }
            if(arr[i] < maxHeap.peek()) {
                maxHeap.poll();
                maxHeap.offer(arr[i]);
            }
        }
        for (int a:minHeap) {
            sum -= a;
        }

        for (int a:maxHeap) {
            sum -= a;
        }
        double res = sum;
        return res/(n-l*2);
    }

    public static double trimMean2(int[] arr) {
        Arrays.sort(arr);
        int n = arr.length;
        int l = n/20;
        int sum = 0,i = l;
        for (; i < n-l; ++i)
            sum+=arr[i];
        return sum/(double)(n-(l<<1));
    }
}
